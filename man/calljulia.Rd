% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calljulia.R
\name{calljulia}
\alias{calljulia}
\title{Function that executes julia code}
\usage{
calljulia(julia.code, inputs = list(), output.names = NULL,
  delete.temp = TRUE, norun = FALSE, julia.call = "julia")
}
\arguments{
\item{julia.code}{a string of julia code to be run. The names of variables
used in this string should match those in the \code{inputs} argument.}

\item{inputs}{List containing all variables that need to be passed to julia.
The names of the elements of the list should match the names used in
\code{julia.code}.  All variables must be numeric (e.g. matrices, vectors,
scalars)}

\item{output.names}{Array of names of all variables that should be returned
from julia.  The names should match those used in julia.code.  All
variables must be numeric (no strings).}

\item{delete.temp}{Default \code{TRUE}.  Indicates whether the temporary
files that are created should be deleted.}

\item{norun}{Default \code{FALSE}.  Mostly for debugging purposes.  Returns
the command that would be run in julia without it actually opening julia.}

\item{julia.call}{How julia can be invoked through the \code{system} command.
Default: \code{"julia"}. In OS X this might be something like
\code{"/Applications/Julia-0.5.app/Contents/Resources/julia/bin/julia"}.
However, this argument does not need to be provided if ~/.profile (for OSX)
has the line export
PATH=/Applications/Julia-0.5.app/Contents/Resources/julia/bin:$PATH
where "0.5" would be replaced with whatever version of Julia you have.}
}
\value{
Returns the following: \describe{
\item{\code{outputs}}{List containing all variables that were listed in
\code{output.names} with the values they have after \code{julia.code} was
executed in Julia} \item{\code{command}}{the string that is run on the
command line.}}
}
\description{
\code{calljulia} lets you run julia code from R.
}
\details{
This function writes the inputs to temporary files (which are deleted unless
\code{delete.temp} is set to \code{FALSE}).  Next, a file of julia code is
produced (named \code{doit.jl} and saved in the working directory).  Next,
this julia code is run by invoking julia from the command line.  Finally, the
outputs are saved to file and read back into R.
}
\examples{
\dontrun{
set.seed(1)
x  <- matrix(rnorm(1000), 20, 50)
# change this next line based on where julia is located:
julia <- "/Applications/Julia-0.3.3.app/Contents/Resources/julia/bin/julia"
jl <- calljulia("y = x + a; z = y - 2", inputs=list(x = x, a = 10),
   output.names=c("y", "z"), julia.call = julia)
range(jl$y - x)
}
}
\seealso{
\code{\link{callconvex}} \code{\link{callconvex.varyparams}}
}
